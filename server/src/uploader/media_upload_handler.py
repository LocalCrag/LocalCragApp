import magic
from PIL import Image

from models.media import Media
from uploader.errors import InvalidFiletypeUploaded
from uploader.upload_handler_utils import store_tmp_file, post_upload, check_filesize_limit, get_max_image_size

allowed_image_mime_types = [
    'image/jpeg',
    'image/png',
    'image/gif',
    'image/bmp'
]

image_sizes = {
    'xl': 2000,
    'l': 1000,
    'm': 500,
    's': 100,
    'xs': 20,
}


def handle_media_upload(args: dict) -> Media:
    """
    Processes an uploaded media file.
    :param args: Request arguments.
    :return: Created media model.
    """
    # Save file in tmp folder
    temp_folder, temp_path, file = store_tmp_file(args)

    # Check if the file type is supported
    mime_type = magic.Magic(mime=True).from_file(temp_path)
    if mime_type not in allowed_image_mime_types:
        raise InvalidFiletypeUploaded

    # Call the handler for the appropriate file type
    media = None
    if mime_type in allowed_image_mime_types:
        check_filesize_limit(file, get_max_image_size(), temp_folder)
        media = handle_image_upload(temp_path, file.filename, args['qquuid'])

    post_upload(file, temp_folder)
    return media


def handle_image_upload(path: str, original_filename, uuid):
    """
    Processes an uploaded image.
    :param path: Current path of the image.
    :param original_filename: Filename of the image as it was uploaded.
    :param uuid: Identifier for the image, generated by the uploader.
    :return: Media object representing the image.
    """
    img = Image.open(path)
    extension = img.format.lower()
    img.save('uploads/{}.{}'.format(uuid, extension))
    media = Media()
    media.filename = '{}.{}'.format(uuid, extension)
    media.original_filename = original_filename
    media.height = img.height
    media.width = img.width

    # Create thumbnails
    portrait = img.height > img.width
    for size_key, size in image_sizes.items():
        if portrait:
            if img.height > size:
                new_size = (round(img.width * (size / img.height)), size)
                img = img.resize(new_size)
            else:
                continue
        else:
            if img.width > size:
                new_size = (size, round(img.height * (size / img.width)))
                img = img.resize(new_size)
            else:
                continue
        setattr(media, 'thumbnail_{}'.format(size_key), True)
        img.save('uploads/{}_{}.{}'.format(uuid, size_key, extension))

    return media
