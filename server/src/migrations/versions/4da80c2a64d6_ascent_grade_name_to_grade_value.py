"""ascent.grade_name to grade_value

Revision ID: 4da80c2a64d6
Revises: 1a595b68e980
Create Date: 2024-11-24 18:34:06.857020

"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "4da80c2a64d6"
down_revision = "1a595b68e980"
branch_labels = None
depends_on = None

mapping = {
    "CLOSED_PROJECT": -2,
    "OPEN_PROJECT": -1,
    "UNGRADED": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4A": 4,
    "4B": 5,
    "4C": 6,
    "5A": 7,
    "5B": 8,
    "5C": 9,
    "6A": 10,
    "6A+": 11,
    "6B": 12,
    "6B+": 13,
    "6C": 14,
    "6C+": 15,
    "7A": 16,
    "7A+": 17,
    "7B": 18,
    "7B+": 19,
    "7C": 20,
    "7C+": 21,
    "8A": 22,
    "8A+": 23,
    "8B": 24,
    "8B+": 25,
    "8C": 26,
    "8C+": 27,
    "9A": 28,
}


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("ascents", schema=None) as batch_op:
        batch_op.add_column(sa.Column("grade_value", sa.Integer(), nullable=False, server_default="0"))

    connection = op.get_bind()
    for grade, value in mapping.items():
        connection.execute(
            sa.text("UPDATE ascents SET grade_value = :value WHERE grade_name = :grade"),
            {"value": value, "grade": grade},
        )

    with op.batch_alter_table("ascents", schema=None) as batch_op:
        batch_op.alter_column(
            "grade_value", existing_type=sa.Integer(), nullable=False, server_default=None
        )  # server_default only required for migration
        batch_op.drop_column("grade_name")
        batch_op.drop_column("grade_scale")

    with op.batch_alter_table("lines", schema=None) as batch_op:
        batch_op.drop_column("grade_name")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("ascents", schema=None) as batch_op:
        batch_op.add_column(sa.Column("grade_name", sa.VARCHAR(length=120), nullable=False, server_default="''"))
        batch_op.add_column(sa.Column("grade_scale", sa.VARCHAR(length=120), nullable=False, server_default="'FB'"))

    with op.batch_alter_table("lines", schema=None) as batch_op:
        batch_op.add_column(sa.Column("grade_name", sa.VARCHAR(length=120), nullable=False, server_default="''"))

    connection = op.get_bind()
    for grade, value in mapping.items():
        connection.execute(
            sa.text("UPDATE ascents SET grade_name = :grade WHERE grade_value = :value"),
            {"value": value, "grade": grade},
        )
        connection.execute(
            sa.text("UPDATE lines SET grade_name = :grade WHERE grade_value = :value"),
            {"value": value, "grade": grade},
        )

    with op.batch_alter_table("ascents", schema=None) as batch_op:
        batch_op.alter_column(
            "grade_name", nullable=False, server_default=None
        )  # server_default only required for migration
        batch_op.alter_column(
            "grade_scale", nullable=False, server_default=None
        )  # server_default only required for migration
        batch_op.drop_column("grade_value")

    with op.batch_alter_table("lines", schema=None) as batch_op:
        batch_op.alter_column(
            "grade_name", nullable=False, server_default=None
        )  # server_default only required for migration
    # ### end Alembic commands ###
