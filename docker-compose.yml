services:
  database:
    image: postgres
    container_name: ${COMPOSE_PROJECT_NAME}_database
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  storage:
    image: quay.io/minio/minio
    container_name: ${COMPOSE_PROJECT_NAME}_minio
    environment:
      MINIO_ROOT_USER: ${S3_USER}
      MINIO_INIT_BUCKET: ${S3_BUCKET}
      MINIO_ROOT_PASSWORD: ${S3_PASSWORD}
    volumes:
      - storage:/data
    ports:
      - "9000:9000"  # Stored Files
      - "9001:9001"  # Web UI
    command: [ "server", "/data", "--console-address", ":9001" ]
    entrypoint: |  # Adopted from https://stackoverflow.com/a/78580294
      /bin/sh -c '
        isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }
        minio $$0 "$$@" --quiet & echo $$! > /tmp/minio.pid
        while ! isAlive; do sleep 0.1; done
        mc alias set minio http://127.0.0.1:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD
        mc mb minio/$$MINIO_INIT_BUCKET || true
        mc anonymous set public minio/$$MINIO_INIT_BUCKET
        kill -s INT $$(cat /tmp/minio.pid) && rm /tmp/minio.pid
        while isAlive; do sleep 0.1; done
        exec minio $$0 "$$@"
      '


  server:
    image: ghcr.io/localcrag/localcrag-server:latest
    depends_on:
      - database
      - storage
    container_name: ${COMPOSE_PROJECT_NAME}_server
    ports:
      - "5000:5000"
    environment:
      SQLALCHEMY_DATABASE_URI: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database/${POSTGRES_DB}"
      SPACES_SECRET_KEY: ${S3_PASSWORD}
      SPACES_ACCESS_KEY: ${S3_USER}
      SPACES_ENDPOINT: http://storage:9000
      SPACES_BUCKET: ${S3_BUCKET}
      SPACES_ACCESS_ENDPOINT: ${S3_ACCESS_ENDPOINT}
      SPACES_ADDRESSING: path
      SUPERADMIN_FIRSTNAME: ${SUPERADMIN_FIRSTNAME}
      SUPERADMIN_LASTNAME: ${SUPERADMIN_LASTNAME}
      SUPERADMIN_EMAIL: ${SUPERADMIN_EMAIL}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      SYSTEM_EMAIL: ${SYSTEM_EMAIL}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_TYPE: ${SMTP_TYPE}
      FRONTEND_HOST: ${FRONTEND_HOST}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3


  client:
    image: ghcr.io/localcrag/localcrag-client:latest
    container_name: ${COMPOSE_PROJECT_NAME}_client
    depends_on:
      - server
    ports:
      - "4200:4200"

  watchtower:
    image: containrrr/watchtower
    container_name: ${COMPOSE_PROJECT_NAME}_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_SCHEDULE: ${WATCHTOWER_SCHEDULE}
      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_NOTIFICATION_URL}
      WATCHTOWER_NOTIFICATION_REPORT: ${WATCHTOWER_NOTIFICATION_REPORT}
      WATCHTOWER_NOTIFICATION_DELAY: 10
    command: server client
    restart: always

volumes:
  database:
  storage:
