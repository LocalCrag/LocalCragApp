name: Publish Docker Images
run-name: Publish Docker Images ðŸš¢

on:
  workflow_run:
    workflows:
      - Release
    types:
      - completed
  pull_request:
    branches:
      - next
    types:
      - closed

jobs:

  build-and-publish:
    runs-on: ubuntu-latest

    if: >
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Extract version from package.json
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push client Docker image
        run: |
          IMAGE_NAME=ghcr.io/localcrag/localcrag-client
          cd client
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            TAG=$VERSION
            docker build -t $IMAGE_NAME:$TAG -t $IMAGE_NAME:latest -f Dockerfile .
            docker push $IMAGE_NAME:$TAG
            docker push $IMAGE_NAME:latest
          else
            TAG=next
            docker build -t $IMAGE_NAME:$TAG -f Dockerfile .
            docker push $IMAGE_NAME:$TAG
          fi

      - name: Build and push server Docker image
        run: |
          IMAGE_NAME=ghcr.io/localcrag/localcrag-server
          cd server
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            TAG=$VERSION
            docker build -t $IMAGE_NAME:$TAG -t $IMAGE_NAME:latest -f Dockerfile .
            docker push $IMAGE_NAME:$TAG
            docker push $IMAGE_NAME:latest
          else
            TAG=next
            docker build -t $IMAGE_NAME:$TAG -f Dockerfile .
            docker push $IMAGE_NAME:$TAG
          fi